version: '3.8'

networks:
  cenobridge:
    external:
      name: host
  caddy:
    external:
      name: host
  mast-int:
volumes:
  bridge_storage:
  caddy_data:
    external: true
  caddy_config:
    external: true
  synapse_data:
    external: true
  mailadm_db:
  synapse_db:
  mastodon_public:
  mastodon_redis:
  mastodon_db:
  mau_data:
services:
  # ceno-client "bridge" service is below
  bridge:
    image: equalitie/ceno-client:latest
    networks:
      - cenobridge
    volumes:
      - bridge_storage:/var/opt/ouinet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackrole == bridge
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M
  # caddy acts as a reverse proxy for synapse (matrix)
  caddy:
    image: caddy:2.6.4
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - type: bind
        source: /var/www
        target: /www
      - mastodon_public:/srv/mastodon/public:ro
    networks:
      - caddy
    environment:
          DWEB_DOMAIN: "${DWEB_DOMAIN}"
          DWEB_ONION: "${DWEB_ONION}"
    configs:
      - source: caddy-caddyfile-config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M
  # synapse is a matrix homeserver running as a service
  synapse:
    image: matrixdotorg/synapse:v1.80.0
    entrypoint:
    - sh
    - -c
    - chown -R 991:991 /data ; /start.py
    volumes:
      - synapse_data:/data
    networks:
      - caddy
    environment:
      SYNAPSE_CONFIG_DIR: "/data"
      SYNAPSE_DATA_DIR: "/data"
      TZ: "UA"
    depends_on:
      - caddy
    configs:
      - source: synapse-homeserver-config
        target: /data/homeserver.yaml
        uid: '991'
        gid: '991'
        mode: 0644
      - source: synapse-signingkey-config
        target: /data/matrix.${DWEB_DOMAIN}.signing.key
        uid: '991'
        gid: '991'
        mode: 0644
      - source: synapse-logconfig-config
        target: /data/matrix.${DWEB_DOMAIN}.log.config
        uid: '991'
        gid: '991'
        mode: 0644
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 6G
  synapse-pg:
    restart: always
    image: postgres:14-alpine
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'synapse']
    environment:
      - 'POSTGRES_USER=synapse'
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
      - 'POSTGRES_INITDB_ARGS=--encoding="UTF8" --lc-collate="C" --lc-ctype="C"'
    volumes:
      - synapse_db:/var/lib/postgresql/data
    depends_on:
      - caddy
      - synapse
    networks:
      - caddy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M
  # element is a matrix web GUI running as a service
  element:
    image: vectorim/element-web:v1.11.26
    networks:
      - caddy
    depends_on:
      - caddy
      - synapse
    configs:
      - source: element-json-config
        target: /app/config.json
      - source: element-nginx-config
        target: /etc/nginx/conf.d/default.conf
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M
  # postfix is running as a part of the delta chat service
  postfix:
    image: keith/deltachat-mailadm-postfix:v0.0.3
    entrypoint:
    - sh
    - -c
    - "postconf -M submission/inet=\"submission inet n - n - - smtpd\" && postconf -P submission/inet/syslog_name=postfix/submission && postconf -P submission/inet/smtpd_tls_security_level=encrypt && postconf -P submission/inet/smtpd_sasl_type=dovecot && postconf -P submission/inet/smtpd_sasl_path=inet:localhost:12345 && postconf -P submission/inet/smtpd_sasl_auth_enable=yes && postconf \"myhostname=${DWEB_DOMAIN}\" && postconf \"mydestination=\" && postconf \"virtual_mailbox_domains=${DWEB_DOMAIN}\" && postconf \"virtual_transport=lmtp:localhost:24\" && postconf \"virtual_mailbox_base=/home/vmail\" && postconf \"virtual_mailbox_maps=texthash:/var/lib/mailadm/virtual_mailboxes\" && postconf \"maillog_file=/dev/stdout\" && postconf \"smtpd_tls_cert_file=/certs/fullchain.pem\" && postconf \"smtpd_tls_key_file=/certs/privkey.pem\" && postfix start-fg"
    volumes:
      - mailadm_db:/var/lib/mailadm/
      - /var/lib/docker/volumes/caddy_data/_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DWEB_DOMAIN}/${DWEB_DOMAIN}.crt:/certs/fullchain.pem
      - /var/lib/docker/volumes/caddy_data/_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DWEB_DOMAIN}/${DWEB_DOMAIN}.key:/certs/privkey.pem
    environment:
      MAIL_DOMAIN: "${DWEB_DOMAIN}"
    networks:
      - caddy
    depends_on:
      - caddy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 128M
  # dovecot is running as a part of the delta chat service
  dovecot:
    image: keith/deltachat-mailadm-dovecot:v0.0.1
    volumes:
      - mailadm_db:/var/lib/mailadm/
      - /var/lib/docker/volumes/caddy_data/_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DWEB_DOMAIN}/${DWEB_DOMAIN}.crt:/certs/fullchain.pem
      - /var/lib/docker/volumes/caddy_data/_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DWEB_DOMAIN}/${DWEB_DOMAIN}.key:/certs/privkey.pem
    environment:
      VMAIL_UID: "${VMAIL_UID}"
      VMAIL_GID: "${VMAIL_GID}"
    networks:
      - caddy
    depends_on:
      - caddy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 128M
  # mailadm is running as a part of the delta chat service
  mailadm:
    image: keith/deltachat-mailadm:v0.0.1
    entrypoint:
    - sh
    - -c
    - mailadm init --web-endpoint="https://${DWEB_DOMAIN}/new_email" --mail-domain=${DWEB_DOMAIN} --vmail-user=vmail ; mailadm add-token ZMqbnG8P --maxuse 100000 --expiry 999d --token ZMqbnG8P ; gunicorn -b :3691 -w 1 mailadm.app:app
    volumes:
      - mailadm_db:/var/lib/mailadm/
    environment:
      MAIL_DOMAIN: "${DWEB_DOMAIN}"
      VMAIL_UID: "${VMAIL_UID}"
      VMAIL_GID: "${VMAIL_GID}"
      WEB_ENDPOINT: "https://${DWEB_DOMAIN}/new_email"
    networks:
      - caddy
    depends_on:
      - caddy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 128M
  # mau is a synapse bot we run for news and other things 
  mau:
    image: dock.mau.dev/maubot/maubot:v0.3.1
    configs:
      - source: mau-config
        target: /data/config.yaml
    volumes:
      - mau_data:/data/
    networks:
      - caddy
    depends_on:
      - caddy
      - synapse
      - element
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 128M

  mastodon-pg:
    restart: always
    image: postgres:14-alpine
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    volumes:
      - mastodon_db:/var/lib/postgresql/data
    networks:
      - mast-int
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M

  mastodon-redis:
    restart: always
    image: redis:7.0-alpine
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    env_file: conf/mastodon/${DWEB_DOMAIN}.env.production
    volumes:
      - mastodon_redis:/data
    networks:
      - mast-int
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M

  mastodon-web:
    restart: always
    image: tootsuite/mastodon:v4.1.1
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    entrypoint:
      - bash
      - -c
      #- "bundle exec rake db:prepare && cd /opt/mastodon && /usr/bin/tini -- bundle exec rails server"
      - "[[ -e /mastodon/public/db.lock ]] && touch /mastodon/public/db.lock || touch /mastodon/public/db.lock && bundle exec rake db:prepare; /usr/bin/tini -- bundle exec rails server"
    env_file: conf/mastodon/${DWEB_DOMAIN}.env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    depends_on:
      - mastodon-pg
      - mastodon-redis
      - mastodon-streaming
    volumes:
      # https://www.digitalocean.com/community/tutorials/how-to-share-data-between-docker-containers
      - mastodon_public:/mastodon/public/ # map static files in volume for caddy
    networks:
      - mast-int
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M

  mastodon-streaming:
    restart: always
    image: tootsuite/mastodon:v4.1.1
    healthcheck:
      test: wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1
        ]
    env_file: conf/mastodon/${DWEB_DOMAIN}.env.production
    command: node ./streaming
    ports:
      - target: 4000
        published: 4000
        protocol: tcp
        mode: host
      #expose:
      #- "4000"
    depends_on:
      - mastodon-pg
      - mastodon-redis
    networks:
      - mast-int
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M

  mastodon-sidekiq:
    restart: always
    image: tootsuite/mastodon:v4.1.1
    entrypoint:
      - sh
      - -c
      - "/usr/bin/tini -- bundle exec sidekiq"
    healthcheck:
      test: ps aux | grep '[s]idekiq\ 6' || false
    env_file: conf/mastodon/${DWEB_DOMAIN}.env.production
    command: bundle exec sidekiq
    depends_on:
      - mastodon-pg
      - mastodon-redis
    volumes:
      - mastodon_public:/mastodon/public/
    networks:
      - mast-int
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.dwebstackdomain == ${DWEB_DOMAIN}
        max_replicas_per_node: 1
      resources:
        limits:
          memory: 512M

configs:
  caddy-caddyfile-config:
    template_driver: golang
    file: ./conf/caddy/Caddyfile.${DWEB_DOMAIN}.tmpl
    external: false
  synapse-homeserver-config:
    file: ./conf/synapse/${DWEB_DOMAIN}.homeserver.yaml
    external: false
  synapse-signingkey-config:
    file: ./conf/synapse/${DWEB_DOMAIN}.signing.key
    external: false
  synapse-logconfig-config:
    file: ./conf/synapse/${DWEB_DOMAIN}.log.config
    external: false
  element-json-config:
    template_driver: golang
    file: ./conf/element/$DWEB_DOMAIN.config.json
    external: false
  element-nginx-config:
    template_driver: golang
    file: ./conf/element/nginx.conf
    external: false
  mau-config:
    file: ./conf/mau/$DWEB_DOMAIN.config.yaml
    external: false

